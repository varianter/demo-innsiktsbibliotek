/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Cardify
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/helper.ts
var path = __toESM(require("path"));
var import_obsidian = require("obsidian");
function parseMDFile(mdContent) {
  const frontMatter = mdContent.match(/^(---\s*\n[\s\S]*?\n?---)/);
  const content = mdContent.replace(/^(---\s*\n[\s\S]*?\n?---)/, "");
  return { frontMatter: frontMatter ? frontMatter[1] : null, content };
}
function extractComment(content) {
  const match = content.match("(?<=\n>%%COMMENT%%\n>)(.*?)(?=\n)");
  return match ? match[1] : "";
}
function extractInternalLink(content) {
  const match = content.match("(?<=\n\\^)(.*?)(?=\n|$)");
  return match ? match[1] : null;
}
function parseCardBlock(cardBlock, activeFilePath) {
  return {
    title: extractComment(cardBlock),
    link: "![[" + path.basename(activeFilePath) + "#^" + extractInternalLink(cardBlock) + "]]"
  };
}
function generateRandomKey(length = 10) {
  return Array.from(Array(length), () => Math.random().toString(36).charAt(2)).join("");
}
function addMissingInternalLink(content, separator) {
  const gSeparator = new RegExp(separator, "g");
  const blocks = content.split(gSeparator);
  const internalLinkRegex = "(?<=\n\\^)(.*?)(?=\n*?$)";
  const separatorList = content.match(gSeparator);
  if (!separatorList && blocks.length !== 1) {
    new import_obsidian.Notice("Cannot add missing internal link, separator not found but have >1 blocks.");
    return content;
  } else if (separatorList && separatorList.length !== blocks.length - 1) {
    new import_obsidian.Notice("Cannot add missing internal link, mismatch length between separator and linked blocks.");
    return content;
  }
  const linkedBlocks = blocks.map((block, idx) => {
    if (!block.match(internalLinkRegex) && block !== "") {
      const linkAnnotation = block.slice(-1) === "\n" ? "^" : "\n^";
      if (separatorList && idx < separatorList.length) {
        return block + linkAnnotation + generateRandomKey() + separatorList[idx];
      } else {
        return block + linkAnnotation + generateRandomKey();
      }
    }
    if (separatorList && idx < separatorList.length) {
      return block + separatorList[idx];
    } else {
      return block;
    }
  });
  return linkedBlocks.join("");
}
function removeUnsuitableCharacters(filename) {
  const unsuitableCharactersRegex = /[^a-zA-Z0-9_.\-\s/]/g;
  return filename.replace(unsuitableCharactersRegex, "");
}

// src/class/CardifySettingTabClass.ts
var import_obsidian2 = require("obsidian");
var CardifySettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Set separator for cards").setDesc("Select the separator used to separate cards in one markdown file").addDropdown((dropDown) => {
      dropDown.addOption("empty line", "empty line");
      dropDown.addOption("---", "---");
      dropDown.setValue(this.plugin.settings.separatorName);
      dropDown.onChange(async (value) => {
        this.plugin.settings.separatorName = value;
        switch (value) {
          case "empty line":
            this.plugin.settings.separator = "\n{2,}";
            break;
          case "---":
            this.plugin.settings.separator = "\n+---\\s*(?:\n+|\n*?)";
            break;
        }
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  separatorName: "empty line",
  // separator: /\n{2,}/, // by default, card are separated by 2 or more new line symbols
  separator: "\n{2,}"
  // by default, card are separated by 2 or more new line symbols
};
var Cardify = class extends import_obsidian3.Plugin {
  async createNewFileContent(content, activeFilePath) {
    const rSeparator = new RegExp(this.settings.separator);
    const cardBlocks = content.split(rSeparator);
    const nonEmptyBlocks = cardBlocks.filter(
      (block) => block.trim().length > 0
    );
    return nonEmptyBlocks.map(
      (block) => {
        return parseCardBlock(block, activeFilePath);
      }
    );
  }
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("combine", "Cardify", async (evt) => {
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile === null) {
        new import_obsidian3.Notice("Cannot get active file.");
        return null;
      }
      if (activeFile.extension !== "md") {
        new import_obsidian3.Notice("Active file is not a markdown file.");
        return null;
      }
      const activeFileBaseName = activeFile.basename;
      const activeDir = activeFile.parent ? activeFile.parent.path : "";
      const generatedFolder = activeDir + "/" + activeFileBaseName;
      if (!await this.app.vault.adapter.exists(generatedFolder)) {
        await this.app.vault.createFolder(generatedFolder);
      }
      const fileContent = await this.app.vault.read(activeFile);
      const { frontMatter, content } = parseMDFile(fileContent);
      const frontMatterString = frontMatter ? frontMatter : "";
      const linkedContent = addMissingInternalLink(content, this.settings.separator);
      await this.app.vault.process(activeFile, (data) => {
        return frontMatterString + linkedContent;
      });
      const newFileContent = await this.createNewFileContent(linkedContent, activeFile.path);
      if (!newFileContent) {
        return new import_obsidian3.Notice("No new content");
      }
      let createdFiles = 0;
      const createdContent = newFileContent.map(async (lb, idx) => {
        const filename = lb.title === "" ? idx.toString() : idx.toString() + "-" + lb.title;
        const filepath = (0, import_obsidian3.normalizePath)(removeUnsuitableCharacters(generatedFolder + "/" + filename + ".md"));
        if (await this.app.vault.adapter.exists(filepath)) {
          new import_obsidian3.Notice(filepath + " already exists, skipped overwriting it.");
        } else {
          createdFiles++;
          return await this.app.vault.create(filepath, lb.link);
        }
      });
      await Promise.all(createdContent);
      createdFiles > 0 && new import_obsidian3.Notice(createdFiles + " new files stored in " + generatedFolder);
    });
    ribbonIconEl.addClass("cardify-ribbon-class");
    (0, import_obsidian3.setIcon)(ribbonIconEl, "copy-plus");
    this.statusBarItemEl = this.addStatusBarItem();
    this.addCommand({
      id: "insert-internal-link",
      name: "Insert internal link",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("^" + generateRandomKey());
      }
    });
    this.addSettingTab(new CardifySettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("editor-change", async () => {
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile === null) {
        new import_obsidian3.Notice("Cannot get active file.");
        return null;
      }
      if (activeFile.extension !== "md") {
        new import_obsidian3.Notice("Active file is not a markdown file.");
        return null;
      }
      const fileContent = await this.app.vault.read(activeFile);
      const { frontMatter, content } = parseMDFile(fileContent);
      const gSeparator = new RegExp(this.settings.separator, "g");
      const blocks = content.split(gSeparator);
      const nonEmptyBlocks = blocks.filter(
        (block) => block.trim().length > 0
      );
      const statusBarText = nonEmptyBlocks.length.toString() + " cards";
      console.log(statusBarText);
      this.statusBarItemEl.setText(statusBarText);
    }));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = DEFAULT_SETTINGS;
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
